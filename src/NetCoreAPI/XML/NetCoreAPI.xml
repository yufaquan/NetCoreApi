<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetCoreAPI</name>
    </assembly>
    <members>
        <member name="T:NetCoreAPI.AuthHelp.ManageVerifyAttribute">
            <summary>
            该过虑器提供给所有对外的RestApi接口使用
            在有需要验证每个接口/方法是否只为管理人员用户调用时使用
            方法级别的过率器
            </summary>
        </member>
        <member name="M:NetCoreAPI.AuthHelp.ManageVerifyAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            方法执行前
            判断用户是否为管理角色，不是则抛出异常
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:NetCoreAPI.AuthHelp.ManageVerifyAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            方法执行后
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:NetCoreAPI.AuthHelp.ManageVerifyAttribute.IsHaveVisitToken(System.String,System.Type)">
            <summary>
            判断是否需要访问令牌
            </summary>
            <param name="actionName"></param>
            <param name="t"></param>
            <returns>true：需要；</returns>
        </member>
        <member name="M:NetCoreAPI.AuthHelp.ManageVerifyAttribute.IsLogin(Entity.User@,System.String@)">
            <summary>
            判断是否登录
            </summary>
            <param name="user"></param>
            <param name="errorMessage"></param>
            <returns>True：已登录；</returns>
        </member>
        <member name="M:NetCoreAPI.AuthHelp.ManageVerifyAttribute.IsHaveAuthorize(System.String,System.Type,System.String@)">
            <summary>
            判断是否有权限
            </summary>
            <param name="actionname">方法名</param>
            <param name="t">Controller类型</param>
            <param name="errorMessage">Controller类型</param>
            <returns>true：有权限；</returns>
        </member>
        <member name="M:NetCoreAPI.AuthHelp.ManageVerifyAttribute.IsCheckLogin(System.Type,System.String)">
            <summary>
            检测是否需要登录
            </summary>
            <param name="t">ControllerType</param>
            <param name="actionname">actionName</param>
            <returns>True：需要登录；</returns>
        </member>
        <member name="T:NetCoreAPI.ExceptionActionFilter">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:NetCoreAPI.ExceptionActionFilter.WriteLog(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            写入日志
            </summary>
            <param name="context">提供使用</param>
        </member>
        <member name="T:NetCoreAPI.NoAuthorizeException">
            <summary>
            没有被授权的异常
            </summary>
        </member>
        <member name="T:NetCoreAPI.UserFriendlyException">
            <summary>
            用户友好异常
            </summary>
        </member>
        <member name="M:NetCoreAPI.AuthorizationService.LoadAuthorize">
            <summary>
            注册权限
            </summary>
        </member>
        <member name="T:NetCoreAPI.Controllers.Management.AttachmentController">
            <summary>
            附件
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.AttachmentController.GetList(System.String,System.Int32,System.Int32)">
            <summary>
            获取列表
            </summary>
            <param name="name">筛选条件And拼接</param>
            <param name="page">页数</param>
            <param name="limit">每页多少条</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.AttachmentController.Add(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.IFormFile})">
            <summary>
            创建附件
            </summary>
            <param name="file">文件</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.AttachmentController.DownLoadAttachment(System.Int32)">
            <summary>
            下载附件
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.AttachmentController.GetAttachment(System.Int32)">
            <summary>
            返回附件信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.Management.AuthorizationController">
            <summary>
            权限
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.AuthorizationController.GetAllAuthorization">
            <summary>
            获取所有权限字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.AuthorizationController.GetAllAuthorizationStringList">
            <summary>
            获取所有权限值
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.Management.ConfigurationController">
            <summary>
            系统配置
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.ConfigurationController.Get">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.ConfigurationController.Set(Entity.Configuration)">
            <summary>
            保存
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.Management.LoginController">
            <summary>
            登录
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.LoginController.LoginByPwd(NetCoreAPI.Controllers.Management.LoginInfo)">
            <summary>
            帐号密码登录
            </summary>
            <param name="info">登录参数</param>
            <returns></returns>
        </member>
        <member name="P:NetCoreAPI.Controllers.Management.LoginInfo.Name">
            <summary>
            用户名/电话/邮箱
            </summary>
        </member>
        <member name="P:NetCoreAPI.Controllers.Management.LoginInfo.Pwd">
            <summary>
            密码(MD5加密一次后传入)
            </summary>
        </member>
        <member name="T:NetCoreAPI.Controllers.Management.MenuController">
            <summary>
            菜单
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.MenuController.GetAllList">
            <summary>
            获取所有菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.MenuController.GetHavePermissionsList">
            <summary>
            获取当前用户有权限的菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.MenuController.Add(Entity.Menus)">
            <summary>
            创建菜单
            </summary>
            <param name="menus">菜单</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.Management.UserController">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.UserController.GetList(System.String,System.Int32,System.Int32)">
            <summary>
            获取用户列表
            </summary>
            <param name="name">筛选条件And拼接</param>
            <param name="page">页数</param>
            <param name="limit">每页多少条</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.UserController.Info">
            <summary>
            获取用户信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Management.UserController.Add(Entity.User)">
            <summary>
            创建用户
            </summary>
            <param name="user">用户</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.Portal.GetVisitTokenController.Get(System.String)">
            <summary>
            获取访问token
            JWT授权(数据将在请求头中进行传输) 参数结构: "Authorization: Bearer {token}"
            </summary>
            <param name="key">唯一标识</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.WeChat.CardController">
            <summary>
            卡券
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.CardController.Get">
            <summary>
            获取卡券列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.CardController.Create(Senparc.Weixin.MP.AdvancedAPIs.Card.Card_CashData)">
            <summary>
            创建卡券
            </summary>
            <param name="info">卡券信息(yitianwan)</param>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.WeChat.OAuth2Controller">
            <summary>
            微信网页授权
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.OAuth2Controller.GetWeChatUserInfo(System.String)">
            <summary>
            获取微信用户信息
            OAuthScope.snsapi_userinfo
            授权回调填写前端地址，此处用code换取用户信息即可
            </summary>
            <param name="code"></param>
            <returns>HttpResult</returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.OAuth2Controller.GetUserInfo(System.String)">
            <summary>
            获取系统用户信息
            OAuthScope.snsapi_userinfo
            会根据openid自动创建用户信息，如已存在则只会更新昵称、性别和头像
            授权回调填写前端地址，此处用code换取用户信息即可
            </summary>
            <param name="code"></param>
            <returns>HttpResult</returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.WeChat.PayV3Controller">
            <summary>
            微信支付
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.PayV3Controller.JsApi(System.Int32)">
            <summary>
            
            </summary>
            <param name="productId"></param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.PayV3Controller.PayNotifyUrl">
            <summary>
            JS-SDK支付回调地址（在统一下单接口中设置notify_url）
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.PayV3Controller.OrderQuery">
            <summary>
            订单查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.PayV3Controller.CloseOrder">
            <summary>
            关闭订单接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.PayV3Controller.Refund">
            <summary>
            退款申请接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.PayV3Controller.RefundNotifyUrl">
            <summary>
            退款通知地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetCoreAPI.Controllers.WeChat.WeChatController">
            <summary>
            微信
            </summary>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.WeChatController.Get(System.String,System.String,System.String,System.String)">
            <summary>
            微信后台验证地址（使用Get），微信后台的“接口配置信息”的Url填写如：http://base.api.yufaquan.cn/WeChat/Get
            </summary>
            <param name="signature">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</param>
            <param name="timestamp">时间戳</param>
            <param name="nonce">随机数</param>
            <param name="echostr">随机字符串</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.WeChatController.Post(Senparc.Weixin.MP.Entities.Request.PostModel,System.String)">
            <summary>
            微信后台验证地址（使用Get），微信后台的“接口配置信息”的Url填写如：http://base.api.yufaquan.cn/WeChat/Post
            </summary>
            <param name="postModel">微信公众服务器Post过来的加密参数集合</param>
            <param name="echostr">随机字符串</param>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.WeChatController.GetToken">
            <summary>
            获取微信接口通用token
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.WeChatController.GetCacheToken">
            <summary>
            获取微信接口通用token （每次调用都会获取一个不同的access_token）
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetCoreAPI.Controllers.WeChat.WeChatController.GetMenu">
            <summary>
            直接通过appid获取菜单
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Appsettings">
            <summary>
            appsettings.json操作类
            </summary>
        </member>
        <member name="M:Common.Appsettings.app(System.String[])">
            <summary>
            封装要操作的字符
            </summary>
            <param name="sections">节点配置</param>
            <returns></returns>
        </member>
        <member name="M:Common.Appsettings.app``1(System.String[])">
            <summary>
            递归获取配置信息数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sections"></param>
            <returns></returns>
        </member>
    </members>
</doc>
